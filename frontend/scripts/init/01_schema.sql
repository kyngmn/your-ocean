BEGIN;

-- =========================
-- 1) ENUM TYPE DEFINITIONS
-- =========================
CREATE TYPE ai_status_enum    AS ENUM ('UNSET', 'PLANNED', 'GENERATING', 'READY', 'FAILED');
CREATE TYPE actor_kind_enum   AS ENUM ('USER', 'PERSONA');
CREATE TYPE big_code_enum     AS ENUM ('O', 'C', 'E', 'A', 'N');
CREATE TYPE report_type_enum  AS ENUM ('SELF', 'FINAL');
CREATE TYPE provider_enum     AS ENUM ('GOOGLE','KAKAO');

CREATE TYPE game_type_enum     AS ENUM ('BART','GNG','UG');
CREATE TYPE balloon_color_enum AS ENUM ('RED','BLUE','GREEN');
CREATE TYPE gng_stimulus_enum  AS ENUM ('GO','NOGO');
CREATE TYPE persona_type_enum AS ENUM ('FAMILY', 'FRIEND', 'STRANGER');
CREATE TYPE money_size_enum   AS ENUM ('LARGE', 'SMALL');
CREATE TYPE big5_source_enum   AS ENUM ('DIARY', 'MY_CHAT', 'SESSION');

-- =========================
-- 2) TABLES
-- =========================

-- users
CREATE TABLE users (
  id                INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email             VARCHAR(255) NOT NULL,
  provider          provider_enum  NOT NULL,
  social_id         VARCHAR(255) NOT NULL,
  nickname          VARCHAR(10)  NOT NULL,
  profile_image_url VARCHAR(255),
  created_at        TIMESTAMPTZ  NOT NULL DEFAULT now(),
  updated_at        TIMESTAMPTZ  NOT NULL DEFAULT now(),
  deleted_at        TIMESTAMPTZ,
  ai_status         ai_status_enum NOT NULL DEFAULT 'UNSET'
);

-- big_five_codes (총 30개 시드)
CREATE TABLE big_five_codes (
  id         SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  big_code   big_code_enum NOT NULL,
  small_code VARCHAR(25)   NOT NULL,
  content    TEXT          NOT NULL
);

-- surveys (문항 풀)
CREATE TABLE surveys (
  id                SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  big_five_id       SMALLINT  NOT NULL REFERENCES big_five_codes(id) ON DELETE RESTRICT,
  is_reverse_scored BOOLEAN   NOT NULL,
  question_text     VARCHAR(500) NOT NULL
);

-- survey_responses (유저의 최종 응답 값)
CREATE TABLE survey_responses (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  survey_id  SMALLINT NOT NULL REFERENCES surveys(id) ON DELETE RESTRICT,
  user_id    INTEGER  NOT NULL REFERENCES users(id)   ON DELETE RESTRICT,
  value      SMALLINT NOT NULL CHECK (value BETWEEN 1 AND 5),
  started_at TIMESTAMPTZ NOT NULL
);

-- survey_responses_log (응답 클릭 로그)
CREATE TABLE survey_responses_log (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  response_id  INTEGER  NOT NULL REFERENCES survey_responses(id) ON DELETE CASCADE,
  value        SMALLINT NOT NULL,
  occurred_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- reports (유저별 리포트)
CREATE TABLE reports (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id     INTEGER NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
  report_type report_type_enum NOT NULL DEFAULT 'SELF',
  content     JSONB   NOT NULL,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- diaries
CREATE TABLE diaries (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id    INTEGER NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
  title      VARCHAR(150) NOT NULL,
  content    TEXT NOT NULL,
  diary_date DATE NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at TIMESTAMPTZ
);

-- user_personas
CREATE TABLE user_personas (
  id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id      INTEGER NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
  persona_code big_code_enum NOT NULL,
  nickname     VARCHAR(25),
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at   TIMESTAMPTZ
);

-- actors (메시지 발신 주체: USER 또는 PERSONA)
CREATE TABLE actors (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  kind       actor_kind_enum NOT NULL,
  user_id    INTEGER REFERENCES users(id) ON DELETE SET NULL,
  persona_id INTEGER REFERENCES user_personas(id) ON DELETE SET NULL,
  CONSTRAINT actors_kind_ref_ck CHECK (
    (kind = 'USER'    AND user_id IS NOT NULL AND persona_id IS NULL) OR
    (kind = 'PERSONA' AND persona_id IS NOT NULL)
  )
);

-- my_chat_messages (개인 채팅 로그)
CREATE TABLE my_chat_messages (
  id              BIGSERIAL PRIMARY KEY,
  user_id         INTEGER NOT NULL REFERENCES users(id)   ON DELETE RESTRICT,
  sender_actor_id INTEGER NOT NULL REFERENCES actors(id)  ON DELETE RESTRICT,
  message         TEXT    NOT NULL,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- diaries용 채팅
CREATE TABLE diary_chat_messages (
  id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  diary_id        INTEGER NOT NULL REFERENCES diaries(id) ON DELETE CASCADE,
  sender_actor_id INTEGER NOT NULL REFERENCES actors(id)  ON DELETE RESTRICT,
  message         TEXT    NOT NULL,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 친구(방) 관계
CREATE TABLE friends (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id    INTEGER NOT NULL REFERENCES users(id)   ON DELETE CASCADE,
  friend_id  INTEGER NOT NULL REFERENCES users(id)   ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at TIMESTAMPTZ,
  CONSTRAINT friends_not_self_ck CHECK (user_id <> friend_id),
  CONSTRAINT friends_order_ck    CHECK (user_id < friend_id)   -- 양방향 중복 방지용 정렬 규칙
);

-- 친구방 채팅
CREATE TABLE friend_chat_messages (
  id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  room_id         INTEGER NOT NULL REFERENCES friends(id)      ON DELETE CASCADE,
  sender_actor_id INTEGER NOT NULL REFERENCES actors(id)       ON DELETE RESTRICT,
  message         TEXT    NOT NULL,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 친구 초대
CREATE TABLE friend_invitations (
  id               INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inviter_user_id  INTEGER NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
  invitee_user_id  INTEGER NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
  status           VARCHAR(9) NOT NULL CHECK (status IN ('PENDING','ACCEPTED','REJECTED')),
  created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
  responded_at     TIMESTAMPTZ,
  deleted_at       TIMESTAMPTZ,
  CONSTRAINT friend_invite_not_self_ck CHECK (inviter_user_id <> invitee_user_id)
);

-- =========================
-- GAME: Sessions (공통 상위 엔티티)
-- =========================
CREATE TABLE game_sessions (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id     INTEGER      NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  game_type   game_type_enum NOT NULL,
  started_at  TIMESTAMPTZ  NOT NULL DEFAULT now(),
  finished_at TIMESTAMPTZ
);

-- =========================
-- GAME: BART
-- =========================

-- 라운드(풍선) 응답 로그
CREATE TABLE game_bart_responses (
  id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id     BIGINT  NOT NULL REFERENCES game_sessions(id) ON DELETE CASCADE,
  round_index    INT     NOT NULL,
  color          balloon_color_enum NOT NULL,
  popping_point  INT     NOT NULL CHECK (popping_point >= 0),
  is_popped      BOOLEAN NOT NULL,
  pumping_cnt    INT     CHECK (pumping_cnt IS NULL OR pumping_cnt >= 0),
  played_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  finished_at    TIMESTAMPTZ,
  CONSTRAINT bart_round_uniq UNIQUE (session_id, round_index)
);

-- 라운드 내 클릭 로그
CREATE TABLE game_bart_clicks (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  response_id BIGINT NOT NULL REFERENCES game_bart_responses(id) ON DELETE CASCADE,
  click_index INT    NOT NULL,
  clicked_at  TIMESTAMPTZ NOT NULL,
  CONSTRAINT bart_click_uniq UNIQUE (response_id, click_index)
);

-- 세션 요약 결과 (세션당 1행 → session_id를 PK로)
CREATE TABLE game_bart_results (
  session_id       BIGINT PRIMARY KEY REFERENCES game_sessions(id) ON DELETE CASCADE,
  reward_amount    INT           NOT NULL CHECK (reward_amount >= 0),
  missed_reward    INT           NOT NULL CHECK (missed_reward >= 0),
  total_balloons   INT           NOT NULL CHECK (total_balloons >= 0),
  success_balloons INT           NOT NULL CHECK (success_balloons >= 0),
  fail_balloons    INT           NOT NULL CHECK (fail_balloons >= 0),
  avg_pumps        NUMERIC(6,2)  NOT NULL CHECK (avg_pumps >= 0),
  computed_at      TIMESTAMPTZ   NOT NULL DEFAULT now(),
  CHECK (total_balloons = success_balloons + fail_balloons)
);

-- =========================
-- GAME: GNG (Go/No-Go)
-- =========================

-- 트라이얼/반응 로그
CREATE TABLE game_gng_responses (
  id                   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id           BIGINT NOT NULL REFERENCES game_sessions(id) ON DELETE CASCADE,
  stimulus_type        gng_stimulus_enum NOT NULL, -- GO / NOGO
  stimulus_started_at TIMESTAMPTZ NOT NULL,
  responded_at         TIMESTAMPTZ,
  is_succeeded         BOOLEAN,
);

-- 세션 요약 결과 (세션당 1행)
CREATE TABLE game_gng_results (
  session_id          BIGINT PRIMARY KEY REFERENCES game_sessions(id) ON DELETE CASCADE,
  total_correct_cnt   INT           NOT NULL CHECK (total_correct_cnt   >= 0),
  total_incorrect_cnt INT           NOT NULL CHECK (total_incorrect_cnt >= 0),
  nogo_incorrect_cnt  INT           NOT NULL CHECK (nogo_incorrect_cnt  >= 0),  -- NOGO에서 억제 실패 수
  avg_reaction_time   NUMERIC(6,2)  NOT NULL CHECK (avg_reaction_time   >= 0),  -- GO 정답에 대한 평균 반응속도
  played_at           TIMESTAMPTZ   NOT NULL,
  finished_at         TIMESTAMPTZ
);

-- =========================
-- GAME: UG (Ultimatum Game)
-- =========================

-- 라운드 카탈로그/오더
CREATE TABLE game_ug_order (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role_type    INT    NOT NULL CHECK (role_type IN (1,2,3)),  -- 1=제안자, 2=응답자, 3=무조건 수락 제안자
  persona_type persona_type_enum NOT NULL,
  money        money_size_enum   NOT NULL,
  rate         INT    NULL CHECK (rate BETWEEN 1 AND 9)    -- 1~9
);

-- 라운드/응답 로그
CREATE TABLE game_ug_responses (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id  BIGINT NOT NULL REFERENCES game_sessions(id) ON DELETE CASCADE,
  order_id    BIGINT REFERENCES game_ug_order(id) ON DELETE RESTRICT,
  money       INT    NOT NULL CHECK (money >= 0),   -- 제안 금액(실제 수치)
  is_accepted BOOLEAN NOT NULL DEFAULT TRUE,
  finished_at TIMESTAMPTZ
);

-- 세션 요약 결과 (세션당 1행)
CREATE TABLE game_ug_results (
  session_id    BIGINT PRIMARY KEY REFERENCES game_sessions(id) ON DELETE CASCADE,
  earned_amount INT    NOT NULL CHECK (earned_amount >= 0),   -- 게이미피케이션용 획득 금액
  finished_at   TIMESTAMPTZ
);

-- =========================
-- Big5 결과 테이블
-- =========================
CREATE TABLE big5_results (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id     INTEGER NOT NULL
              REFERENCES users(id) ON DELETE CASCADE,
  source_type big5_source_enum NOT NULL,
  source_id   BIGINT NOT NULL,  -- FK 직접 지정 불가, 앱/트리거에서 검증 필요

  result_o    SMALLINT NOT NULL CHECK (result_o BETWEEN 0 AND 100),
  result_c    SMALLINT NOT NULL CHECK (result_c BETWEEN 0 AND 100),
  result_e    SMALLINT NOT NULL CHECK (result_e BETWEEN 0 AND 100),
  result_a    SMALLINT NOT NULL CHECK (result_a BETWEEN 0 AND 100),
  result_n    SMALLINT NOT NULL CHECK (result_n BETWEEN 0 AND 100),

  computed_at TIMESTAMPTZ NOT NULL DEFAULT now(),

  -- 동일 출처에 대해 중복 방지
  CONSTRAINT uq_big5_user_source UNIQUE (user_id, source_type, source_id)
);

-- =========================
-- 3) CONSTRAINTS & INDEXES
-- =========================

-- users
ALTER TABLE users
  ADD CONSTRAINT users_email_uk UNIQUE (email);
ALTER TABLE users
  ADD CONSTRAINT users_provider_social_uk UNIQUE (provider, social_id);

-- big_five_codes
ALTER TABLE big_five_codes
  ADD CONSTRAINT big_five_codes_small_code_uk UNIQUE (small_code);
ALTER TABLE big_five_codes
  ADD CONSTRAINT big_five_codes_small_code_pat_ck
  CHECK (small_code ~ '^[OCEAN][1-6]$');

-- surveys
CREATE INDEX idx_surveys_bf ON surveys (big_five_id);

-- survey_responses
ALTER TABLE survey_responses
  ADD CONSTRAINT survey_responses_uniq UNIQUE (user_id, survey_id);
CREATE INDEX idx_survey_responses_user ON survey_responses (user_id);

-- survey_responses_log
CREATE INDEX idx_survey_responses_log_resp ON survey_responses_log (response_id);
CREATE INDEX idx_survey_responses_log_time ON survey_responses_log (occurred_at);

-- reports
ALTER TABLE reports
  ADD CONSTRAINT reports_user_type_uk UNIQUE (user_id, report_type);

-- diaries
CREATE INDEX idx_diaries_user ON diaries (user_id);
CREATE INDEX idx_diaries_date ON diaries (diary_date);

-- user_personas
ALTER TABLE user_personas
  ADD CONSTRAINT user_personas_uniq UNIQUE (user_id, persona_code);
CREATE INDEX idx_user_personas_user ON user_personas (user_id);

-- actors: 부분 유니크(동일 user_id는 USER kind에서 한 번만, 동일 persona_id는 PERSONA kind에서 한 번만)
CREATE INDEX idx_actors_kind ON actors (kind);
CREATE INDEX idx_actors_user ON actors (user_id);
CREATE INDEX idx_actors_persona ON actors (persona_id);
CREATE UNIQUE INDEX ux_actors_user_when_user
  ON actors(user_id) WHERE kind = 'USER';
CREATE UNIQUE INDEX ux_actors_persona_when_persona
  ON actors(persona_id) WHERE kind = 'PERSONA';

-- my_chat_messages
CREATE INDEX idx_my_chat_messages_user_time ON my_chat_messages (user_id, created_at);
CREATE INDEX idx_my_chat_messages_actor ON my_chat_messages (sender_actor_id);

-- diary_chat_messages
CREATE INDEX idx_diary_chat_messages_diary_time ON diary_chat_messages (diary_id, created_at);

-- friends
ALTER TABLE friends
  ADD CONSTRAINT friends_pair_uk UNIQUE (user_id, friend_id);

-- friend_chat_messages
CREATE INDEX idx_friend_chat_messages_room_time ON friend_chat_messages (room_id, created_at);

-- friend_invitations
CREATE UNIQUE INDEX ux_friend_invitations_pending
  ON friend_invitations (inviter_user_id, invitee_user_id)
  WHERE status = 'PENDING';
CREATE INDEX idx_friend_invitations_invitee_status
  ON friend_invitations (invitee_user_id, status);

-- game_sessions
CREATE INDEX idx_game_sessions_user ON game_sessions(user_id, started_at DESC);

-- big5_results: 사용자별 최신 조회 + 출처 역추적
CREATE INDEX idx_big5_user_computed_at
  ON big5_results (user_id, computed_at DESC);
CREATE INDEX idx_big5_source_pair
  ON big5_results (source_type, source_id);

COMMIT
