/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ActorKindEnum = "PERSONA" | "USER";

export type AiStatusEnum = "GENERATING" | "GENERATED" | "UNSET";

export type BalloonColorEnum = "BLUE" | "GREEN" | "RED";

export type BigCodeEnum = "A" | "C" | "E" | "N" | "O";

export type GameTypeEnum = "BART" | "GNG" | "UG";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type GngStimulusEnum = "GO" | "NOGO";

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type MoneySizeEnum = "LARGE" | "SMALL"

export type Numeric = ColumnType<string, number | string, number | string>;

export type PersonaTypeEnum = "FAMILY" | "STRANGER" | "FRIEND"

export type ReportTypeEnum = "FINAL" | "SELF";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Actors {
  id: Generated<number>;
  kind: ActorKindEnum;
  personaId: number | null;
  userId: number | null;
}

export interface BigFiveCodes {
  bigCode: BigCodeEnum;
  content: string;
  id: Generated<number>;
  smallCode: string;
}

export interface Diaries {
  content: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  diaryDate: Timestamp;
  id: Generated<number>;
  title: string;
  updatedAt: Timestamp | null;
  userId: number;
}

export interface DiaryChatMessages {
  createdAt: Generated<Timestamp>;
  diaryId: number;
  id: Generated<Int8>;
  message: string;
  senderActorId: number;
}

export interface FriendChatMessages {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  message: string;
  roomId: number;
  senderActorId: number;
}

export interface FriendInvitations {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  inviteeUserId: number;
  inviterUserId: number;
  respondedAt: Timestamp | null;
  status: string;
}

export interface Friends {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  friendId: number;
  id: Generated<number>;
  userId: number;
}

export interface GameBartClicks {
  clickedAt: Timestamp;
  clickIndex: number;
  id: Generated<Int8>;
  responseId: Int8;
}

export interface GameBartResponses {
  color: BalloonColorEnum;
  finishedAt: Timestamp | null;
  id: Generated<Int8>;
  isPopped: boolean;
  playedAt: Generated<Timestamp>;
  poppingPoint: number;
  pumpingCnt: number | null;
  roundIndex: number;
  sessionId: Int8;
}

export interface GameBartResults {
  avgPumps: Numeric;
  computedAt: Generated<Timestamp>;
  failBalloons: number;
  missedReward: number;
  rewardAmount: number;
  sessionId: Int8;
  successBalloons: number;
  totalBalloons: number;
}

export interface GameGngResponses {
  id: Generated<Int8>;
  isSucceeded: boolean | null;
  respondedAt: Timestamp | null;
  sessionId: Int8;
  stimulusAppearedAt: Timestamp;
  stimulusType: GngStimulusEnum;
  trialIndex: number;
  trialStartedAt: Timestamp;
}

export interface GameGngResults {
  avgReactionTime: Numeric;
  finishedAt: Timestamp | null;
  nogoIncorrectCnt: number;
  playedAt: Timestamp;
  sessionId: Int8;
  totalCorrectCnt: number;
  totalIncorrectCnt: number;
}

export interface GameSessionResults {
  resultA: number;
  resultC: number;
  resultE: number;
  resultN: number;
  resultO: number;
  sessionId: Int8;
  userId: number;
}

export interface GameSessions {
  finishedAt: Timestamp | null;
  gameType: GameTypeEnum;
  id: Generated<Int8>;
  startedAt: Generated<Timestamp>;
  userId: number;
}

export interface GameUgOrder {
  id: Generated<Int8>;
  money: MoneySizeEnum;
  personaType: PersonaTypeEnum;
  rate: number;
  roleType: number;
}

export interface GameUgResponses {
  finishedAt: Timestamp | null
  id: Generated<Int8>
  isAccepted: Generated<boolean>
  proposalRate : number
  money: number
  orderId: Int8 | null
  sessionId: Int8
}

export interface GameUgResults {
  earnedAmount: number;
  finishedAt: Timestamp | null;
  sessionId: Int8;
}

export interface MyChatMessages {
  createdAt: Generated<Timestamp>;
  id: Generated<Int8>;
  message: string;
  senderActorId: number;
  userId: number;
}

export interface Reports {
  content: Json;
  createdAt: Generated<Timestamp>;
  id: Generated<Int8>;
  reportType: Generated<ReportTypeEnum>;
  userId: number;
}

export interface SurveyResponses {
  id: Generated<number>;
  startedAt: Timestamp;
  surveyId: number;
  userId: number;
  value: number;
}

export interface SurveyRequest{
  page: number;
}

export interface SurveyQuestion{
  id: number;
  questionText: string;
}

export interface SurveyResponsesLog {
  createdAt: Generated<Timestamp>;
  id: Generated<Int8>;
  occurredAt: Generated<Timestamp>;
  responseId: number;
  value: number;
}

export interface Surveys {
  bigFiveId: number;
  id: Generated<number>;
  isReverseScored: boolean;
  questionText: string;
}

export interface UserPersonas {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  nickname: string | null;
  personaCode: BigCodeEnum;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface Users {
  aiStatus: Generated<AiStatusEnum>;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  email: string;
  id: Generated<number>;
  nickname: string;
  profileImageUrl: string | null;
  provider: string;
  socialId: string;
  updatedAt: Generated<Timestamp>;
}

export interface DB {
  actors: Actors;
  bigFiveCodes: BigFiveCodes;
  diaries: Diaries;
  diaryChatMessages: DiaryChatMessages;
  friendChatMessages: FriendChatMessages;
  friendInvitations: FriendInvitations;
  friends: Friends;
  gameBartClicks: GameBartClicks;
  gameBartResponses: GameBartResponses;
  gameBartResults: GameBartResults;
  gameGngResponses: GameGngResponses;
  gameGngResults: GameGngResults;
  gameSessionResults: GameSessionResults;
  gameSessions: GameSessions;
  gameUgOrder: GameUgOrder;
  gameUgResponses: GameUgResponses;
  gameUgResults: GameUgResults;
  myChatMessages: MyChatMessages;
  reports: Reports;
  surveyResponses: SurveyResponses;
  surveyResponsesLog: SurveyResponsesLog;
  surveys: Surveys;
  userPersonas: UserPersonas;
  users: Users;
}
