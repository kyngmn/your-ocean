services:
  # 프론트엔드 (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: myocean-frontend
    ports:
      - "3333:3000"
    networks:
      - ocean-net
    restart: always

  # 웹 서버 (Nginx)
  nginx:
    image: nginx:alpine
    container_name: web-nginx
    ports:
      - "80:80"      # HTTP 포트
      - "443:443"    # HTTPS 포트
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
      - ./nginx/certs:/etc/letsencrypt:ro
      - ./nginx/html:/var/www/certbot:rw
    networks:
      - ocean-net
    restart: always

  # 메트릭 수집 및 모니터링 시스템 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # Prometheus 웹 UI 포트
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro  # 설정 파일
      - prometheus_data:/prometheus  # 데이터 저장소
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'        # 설정 파일 경로
      - '--storage.tsdb.path=/prometheus'                     # 데이터 저장 경로
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'                              # API를 통한 설정 리로드 활성화
      - '--web.external-url=https://myocean.cloud/prometheus'  # 외부 URL
      - '--web.route-prefix=/prometheus'                      # 라우트 프리픽스
    networks:
      - ocean-net
    restart: always

  # 시스템 메트릭 수집기 (Node Exporter)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"  # Node Exporter 포트
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ocean-net
    restart: always

  # 컨테이너 메트릭 수집기 (cAdvisor)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8081:8080"  # cAdvisor 웹 UI 포트 (Jenkins 8080과 충돌 방지)
    volumes:
      - /:/rootfs:ro                        # 호스트 루트 파일시스템 (읽기 전용)
      - /var/run:/var/run:ro               # Docker 소켓 및 런타임 정보 (읽기 전용)
      - /sys:/sys:ro                       # 시스템 정보 및 cgroup 데이터 (읽기 전용)
      - /var/lib/docker/:/var/lib/docker:ro # Docker 컨테이너 데이터 (읽기 전용)
      - /dev/disk/:/dev/disk:ro            # 디스크 디바이스 정보 (읽기 전용)
    privileged: true                        # 호스트의 모든 권한 부여 (컨테이너 메트릭 수집을 위해 필요)
    devices:
      - /dev/kmsg                          # 커널 메시지 디바이스 접근 (시스템 로그용)
    command:
      - '--housekeeping_interval=30s'      # 메트릭 수집 주기 (30초마다)
      - '--docker_only=true'               # Docker 컨테이너만 모니터링 (다른 런타임 제외)
    networks:
      - ocean-net
    restart: always

  # 시각화 및 대시보드 도구 (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana 웹 UI 포트
    volumes:
      - grafana_data:/var/lib/grafana  # 데이터 저장소 (대시보드, 사용자 등)
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}       # 관리자 사용자명
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}  # 초기 관리자 비밀번호
      - GF_SERVER_ROOT_URL=https://myocean.cloud/grafana  # 서브패스 URL
      - GF_SERVER_SERVE_FROM_SUB_PATH=true                  # 서브패스에서 서비스
    networks:
      - ocean-net
    restart: always

# 데이터 볼륨 정의
volumes:
  prometheus_data:  # Prometheus 메트릭 데이터 저장
  grafana_data:     # Grafana 설정 및 대시보드 저장

# 네트워크 정의
networks:
  ocean-net:
    external: true
